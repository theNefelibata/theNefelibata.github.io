<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://theNefelibata.github.io/</id>
    <title>theNefelibata</title>
    <updated>2021-03-02T06:32:42.111Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://theNefelibata.github.io/"/>
    <link rel="self" href="https://theNefelibata.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://theNefelibata.github.io/images/avatar.png</logo>
    <icon>https://theNefelibata.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, theNefelibata</rights>
    <entry>
        <title type="html"><![CDATA[对象的概念]]></title>
        <id>https://theNefelibata.github.io/post/dui-xiang-de-gai-nian/</id>
        <link href="https://theNefelibata.github.io/post/dui-xiang-de-gai-nian/">
        </link>
        <updated>2021-03-02T06:07:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="抽象">抽象</h2>
<ol>
<li><strong>万物皆对象</strong>。你可以将对象想象成一种特殊的变量。它存储数据，但可以在你对其“发出请求”时执行本身的操作。理论上讲，你总是可以从要解决的问题身上抽象出概念性的组件，然后在程序中将其表示为一个对象。</li>
<li><strong>程序是一组对象，通过消息传递来告知彼此该做什么</strong>。要请求调用一个对象的方法，你需要向该对象发送消息。</li>
<li><strong>每个对象都有自己的存储空间，可容纳其他对象</strong>。或者说，通过封装现有对象，可制作出新型对象。所以，尽管对象的概念非常简单，但在程序中却可达到任意高的复杂程度。</li>
<li><strong>每个对象都有一种类型</strong>。根据语法，每个对象都是某个“类”的一个“实例”。其中，“类”（Class）是“类型”（Type）的同义词。一个类最重要的特征就是“能将什么消息发给它？”。</li>
<li><strong>同一类所有对象都能接收相同的消息</strong>。这实际是别有含义的一种说法，大家不久便能理解。由于类型为“圆”（Circle）的一个对象也属于类型为“形状”（Shape）的一个对象，所以一个圆完全能接收发送给&quot;形状”的消息。这意味着可让程序代码统一指挥“形状”，令其自动控制所有符合“形状”描述的对象，其中自然包括“圆”。这一特性称为对象的“可替换性”，是OOP最重要的概念之一。</li>
</ol>
<h2 id="封装">封装</h2>
<p>研发程序员开发一个工具类，该工具类仅向应用程序员公开必要的内容，并隐藏内部实现的细节。这样可以有效地避免该工具类被错误的使用和更改，从而减少程序出错的可能。彼此职责划分清晰，相互协作。Java 有三个显式关键字来设置类中的访问权限：<code>public</code>（公开），<code>private</code>（私有）和<code>protected</code>（受保护）。这些访问修饰符决定了谁能使用它们修饰的方法、变量或类。</p>
<ul>
<li>
<p><code>public</code>（公开）表示任何人都可以访问和使用该元素；</p>
</li>
<li>
<p><code>private</code>（私有）除了类本身和类内部的方法，外界无法直接访问该元素。private 是类和调用者之间的屏障。任何试图访问私有成员的行为都会报编译时错误；</p>
</li>
<li>
<p><code>protected</code>（受保护）类似于 private，区别是子类（下一节就会引入继承的概念）可以访问 protected 的成员，但不能访问 private 成员；</p>
</li>
<li>
<p><code>default</code>（默认）如果你不使用前面的三者，默认就是 default 访问权限。default 被称为包访问，因为该权限下的资源可以被同一包（库组件）中其他类的成员访问。</p>
</li>
</ul>
<h2 id="复用">复用</h2>
]]></content>
    </entry>
</feed>